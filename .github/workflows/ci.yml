name: Heimdall CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: heimdall
          POSTGRES_PASSWORD: heimdall_password
          POSTGRES_DB: heimdall_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: kms,secretsmanager
          DEFAULT_REGION: us-east-1
          DEBUG: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 4566:4566

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq gcc g++ make libffi-dev python3-dev

    - name: Setup development environment
      run: make setup-dev
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: heimdall
        POSTGRES_PASSWORD: heimdall_password
        POSTGRES_DB: heimdall_test
        REDIS_URL: redis://localhost:6379/1
        AWS_ENDPOINT_URL: http://localhost:4566
        AWS_DEFAULT_REGION: us-east-1
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test

    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U heimdall; do sleep 1; done'
        
        echo "Waiting for Redis..."
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 1; done'
        
        echo "Waiting for LocalStack..."
        timeout 120 bash -c 'until curl -s http://localhost:4566/_localstack/health | grep -q available; do sleep 2; done'

    - name: Initialize AWS resources
      run: |
        # Install AWS CLI
        pip install awscli
        
        # Configure AWS CLI for LocalStack
        aws configure set aws_access_key_id test --profile localstack
        aws configure set aws_secret_access_key test --profile localstack
        aws configure set region us-east-1 --profile localstack
        aws configure set endpoint_url http://localhost:4566 --profile localstack
        
        # Initialize AWS resources
        chmod +x docker/localstack/init-aws.sh
        AWS_DEFAULT_REGION=us-east-1 AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test ./docker/localstack/init-aws.sh
      env:
        AWS_ENDPOINT_URL: http://localhost:4566

    - name: Run tests
      run: |
        export POSTGRES_HOST=localhost
        export POSTGRES_PORT=5432
        export POSTGRES_USER=heimdall
        export POSTGRES_PASSWORD=heimdall_password
        export POSTGRES_DB=heimdall_test
        export REDIS_URL=redis://localhost:6379/1
        export AWS_ENDPOINT_URL=http://localhost:4566
        export AWS_DEFAULT_REGION=us-east-1
        export AWS_ACCESS_KEY_ID=test
        export AWS_SECRET_ACCESS_KEY=test
        python run_tests.py

    - name: Run linting and type checking
      run: |
        make format-check
        make lint
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          junit.xml
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security scanning tools
      run: |
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r application/ nitro_wallet/ config/ -f json -o bandit-report.json || true
        bandit -r application/ nitro_wallet/ config/ || true

    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Starknet server image
      run: |
        docker build -t heimdall-starknet-server ./application/starknet/server/

    - name: Build Starknet enclave image
      run: |
        docker build -t heimdall-starknet-enclave ./application/starknet/enclave/

    - name: Build mock enclave image
      run: |
        docker build -t heimdall-nitro-enclave-mock ./docker/nitro-enclave-mock/

    - name: Test Docker images
      run: |
        docker run --rm heimdall-starknet-server python -c "import app; print('Starknet server image OK')"
        docker run --rm heimdall-nitro-enclave-mock python -c "import server; print('Mock enclave image OK')"