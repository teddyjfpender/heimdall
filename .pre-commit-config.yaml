# Enhanced Pre-commit hooks configuration for Heimdall
# See https://pre-commit.com for more information

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: debug-statements
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: requirements-txt-fixer

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports]
        additional_dependencies:
          - types-requests
          - types-redis
          - types-psycopg2
        exclude: ^(tests/fixtures/|docs/|scripts/)

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, nitro_wallet/, application/, config/, -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Python upgrades
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # Remove unused imports
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091, -e, SC2086]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: [-d, relaxed]

  # Local hooks for custom checks
  - repo: local
    hooks:
      # Fast unit tests
      - id: pytest-unit-fast
        name: pytest-unit-fast
        entry: pytest -m "unit and not slow and not integration" --tb=short -x
        language: system
        pass_filenames: false
        stages: [commit]

      # Type checking
      - id: mypy-local
        name: mypy-local
        entry: mypy nitro_wallet/ config/ --ignore-missing-imports
        language: system
        types: [python]
        pass_filenames: false

      # Check for AWS credentials in code
      - id: check-aws-credentials
        name: Check for AWS credentials
        entry: bash -c 'if grep -r "AKIA[0-9A-Z]{16}" --include="*.py" --exclude-dir=tests .; then echo "❌ AWS credentials found in code!"; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for private keys
      - id: check-private-keys
        name: Check for private keys
        entry: bash -c 'if grep -r "BEGIN.*PRIVATE KEY" --include="*.py" --exclude-dir=tests .; then echo "❌ Private keys found in code!"; exit 1; fi'
        language: system
        pass_filenames: false

      # Validate Python imports
      - id: check-python-imports
        name: Check Python imports
        entry: python -c "import sys; import ast; [ast.parse(open(f).read()) for f in sys.argv[1:]]"
        language: system
        files: \.py$

      # Validate configuration files
      - id: validate-config
        name: Validate configuration
        entry: bash -c 'PYTHONPATH=. python -c "from config.settings import settings; errors = settings.validate() if hasattr(settings, \"validate\") else []; print(\"✅ Config valid\" if not errors else f\"❌ Config errors: {errors}\"); exit(len(errors))"'
        language: system
        pass_filenames: false
        files: ^config/.*\.py$

      # Check Docker Compose validity
      - id: check-docker-compose
        name: Check Docker Compose
        entry: docker-compose -f docker-compose.yml config
        language: system
        files: docker-compose\.yml$
        pass_filenames: false

# Configuration for specific tools
default_language_version:
  python: python3

default_stages: [commit]

# Exclude patterns  
exclude: |
  (?x)^(
    \.git/|
    \.tox/|
    \.mypy_cache/|
    \.pytest_cache/|
    __pycache__/|
    \.env.*|
    \.venv/|
    venv/|
    node_modules/|
    cdk\.out/|
    htmlcov/|
    \.coverage|
    coverage\.xml|
    junit\.xml|
    bandit-report\.json|
    test-reports/
  )$